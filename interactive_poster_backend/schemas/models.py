from typing import List, Optional
from pydantic import BaseModel, Field # Field needed for default_factory
from datetime import datetime
import uuid

# --- Base Schemas (for data retrieved from DB) ---

class SectionBase(BaseModel):
    section_id: str
    section_title: str
    section_content: Optional[str] = None
    # Assuming section_images_json from DB model maps to section_images in Pydantic
    # For reading, it might be better to name it section_images_json if that's the DB field name
    # Or handle the transformation in the ORM model or when converting.
    # For now, let's assume it's a list of strings.
    section_images: List[str] = Field(default_factory=list)

    class Config:
        orm_mode = True # Pydantic V1
        # from_attributes = True # Pydantic V2

class PosterBase(BaseModel):
    poster_id: str
    title: str
    abstract: Optional[str] = None
    conclusion: Optional[str] = None
    theme: str = "default_theme" # Old general theme field
    selected_theme: str = "default" # New specific styling theme
    last_modified: datetime
    pptx_file_path: Optional[str] = None
    preview_image_path: Optional[str] = None
    style_overrides: Optional['PosterElementStyles'] = None
    preview_status: str = "completed" # Default for new Pydantic models
    preview_last_error: Optional[str] = None

    class Config:
        orm_mode = True
        # from_attributes = True

# Schemas for full representation (potentially with relationships)
class Section(SectionBase):
    # No extra fields needed here if sections are always part of a Poster
    pass

class Poster(PosterBase):
    sections: List[Section] = Field(default_factory=list)


# --- Creation Schemas (for API input validation) ---

class SectionCreate(BaseModel):
    # section_id will be auto-generated by DB model default
    section_title: str
    section_content: Optional[str] = None
    section_images: List[str] = Field(default_factory=list) # Renamed from section_images_json for API consistency

class PosterCreate(BaseModel):
    # poster_id, last_modified, file paths are auto-generated or set by server
    title: str
    abstract: Optional[str] = None
    conclusion: Optional[str] = None
    theme: Optional[str] = "default_theme" # Old general theme
    selected_theme: Optional[str] = "default" # New specific styling theme
    style_overrides: Optional['PosterElementStyles'] = None # Forward reference
    sections: Optional[List[SectionCreate]] = Field(default_factory=list)


# --- Update Schemas (for API input validation on updates) ---

class SectionUpdate(BaseModel):
    # All fields are optional for updates
    section_title: Optional[str] = None
    section_content: Optional[str] = None
    section_images: Optional[List[str]] = None # Allow replacing the list

class PosterUpdate(BaseModel):
    # All fields are optional for updates
    title: Optional[str] = None
    abstract: Optional[str] = None
    conclusion: Optional[str] = None
    theme: Optional[str] = None # Old general theme
    selected_theme: Optional[str] = None
    style_overrides: Optional['PosterElementStyles'] = None
    preview_status: Optional[str] = None # Allow updating status
    preview_last_error: Optional[str] = None # Allow updating/clearing error
    # For sections, if provided, it implies replacing all existing sections.
    # More granular updates (add/remove/update specific section by ID) would need more complex logic/endpoints.
    sections: Optional[List[SectionCreate]] = None


# --- Pydantic models for Style Overrides ---
class ElementStyleProperties(BaseModel):
    font_size: Optional[int] = None
    color: Optional[str] = None # Hex color string, e.g., "#FF0000"
    font_family: Optional[str] = None
    # background_color: Optional[str] = None # Example for elements if needed

    class Config:
        extra = 'forbid' # Ensure no unexpected style properties are passed

class PosterElementStyles(BaseModel):
    title: Optional[ElementStyleProperties] = None
    abstract: Optional[ElementStyleProperties] = None
    conclusion: Optional[ElementStyleProperties] = None
    section_title: Optional[ElementStyleProperties] = None # General style for all section titles
    section_content: Optional[ElementStyleProperties] = None # General style for all section content
    slide_background: Optional[str] = None # Overall slide background color override for the entire poster

    class Config:
        extra = 'forbid'


# --- Schemas from original subtask (ensure they are compatible or integrated) ---
# These were for API request/responses, may overlap or need merging with DB-focused schemas

class OriginalCreatePosterRequest(BaseModel):
    topic: Optional[str] = None
    template_id: Optional[str] = None

# This schema is used by the /prompt endpoint's request body
class OriginalLLMPromptRequest(BaseModel):
    prompt_text: Optional[str] = None
    target_element_id: Optional[str] = None
    selected_theme: Optional[str] = None
    style_overrides: Optional[PosterElementStyles] = None
    is_direct_update: Optional[bool] = Field(default=False) # New field

class APICreatePosterResponse(BaseModel):
    poster_id: str
    poster_data: Poster
    preview_image_url: str

# class OriginalLLMPromptResponse(BaseModel): # This will be APILLMPromptResponse
#     poster_id: str
    llm_response_text: str
    updated_poster_data: Poster # Use DB-aware Poster
    preview_image_url: str

class OriginalGeneratePPTXResponse(BaseModel): # Renamed
    poster_id: str
    download_url: str
    message: str

# --- Revised API Specific Schemas (integrating DB views with API needs) ---

# For creating a poster via API - may differ from PosterCreate if API takes less/different fields initially
# For now, PosterCreate is quite suitable for API input.
# The `OriginalCreatePosterRequest` is used for the initial /posters call.
# The `PosterCreate` schema is for when we have full data to put into the DB (used by CRUD).

# Response for getting a single poster (matches the Poster schema)
GetPosterResponse = Poster


# The old FastAPI route `CreatePosterResponse` was:
# class CreatePosterResponse(BaseModel):
#     poster_id: str
#     poster_data: PosterData # This PosterData needs to become the new Poster schema
#     preview_image_url: str

# Let's define API response models clearly:
# APICreatePosterResponse defined above (was OriginalCreatePosterResponse)

# The `interactive_poster_backend/schemas/models.py` used by router for PosterData (before this subtask):
# class PosterData(BaseModel):
#     title: str
#     abstract: Optional[str] = None
#     sections: List[PosterSection] # PosterSection was a simpler Pydantic model
#     conclusion: Optional[str] = None
#     theme: str = "professional_blue"
# This needs to align with the new DB-backed `Poster` schema.
# The key difference is `PosterSection` vs `Section` (which is `SectionBase`).
# The router's `PosterData` should be replaced by `Poster` schema for consistency.

# The old FastAPI route `CreatePosterResponse` was:
# class CreatePosterResponse(BaseModel):
#     poster_id: str
#     poster_data: PosterData # This PosterData needs to become the new Poster schema
#     preview_image_url: str

# Let's define API response models clearly:
class APICreatePosterResponse(BaseModel):
    poster_id: str
    poster_data: Poster # Use the new Poster schema which includes sections
    preview_image_url: str

class APILLMPromptResponse(BaseModel):
    poster_id: str
    llm_response_text: str
    updated_poster_data: Poster # Use the new Poster schema
    preview_image_url: str

# GeneratePPTXResponse is fine as is.
APIGeneratePPTXResponse = OriginalGeneratePPTXResponse

# The existing router `CreatePosterRequest` is simple (topic, template_id).
# This is used to *initiate* a poster. The `PosterCreate` schema is for when the
# full poster structure (with sections) is defined for DB storage.
# The router's `create_poster_session` will use `PosterCreate` internally to add to DB.

# The `PosterState` schema defined in router is for in-memory state.
# It will be replaced by DB storage.
# class PosterState(BaseModel):
#     poster_id: str
#     poster_data: PosterData # This should become Poster schema
#     last_modified: datetime
#     pptx_file_path: Optional[str] = None
#     preview_image_path: Optional[str] = None

# The Pydantic models used directly by FastAPI endpoints (request bodies, responses)
# should now ideally use these new schemas.
# For example, the router's `create_poster_session` currently uses a local PosterData.
# That local PosterData will be replaced by these schemas.
# For now, this file defines the schemas. Router updates will come later.
